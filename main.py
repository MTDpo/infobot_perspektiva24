# -*- coding: utf-8 -*-
import config
from logging.handlers import RotatingFileHandler
import logging
from utils import TestStates

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

from classes import *
from text import *
from urls import *

kb = Keyboard()
db = Dbase()

bot = Bot(token=config.token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


# –ü–∏—à–µ–º –ª–æ–≥ –≤ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–ø—É—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
logging.basicConfig(
        handlers=[RotatingFileHandler(config.bot_log, maxBytes=1000000, backupCount=1, encoding='utf-8')],
        level=logging.DEBUG,
        format="%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s",
        datefmt='%Y-%m-%dT%H:%M:%S')


def create_table():
    # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('/usr/onperspektiva24.com_infobot/main.db')
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS some_info(
       id INT PRIMARY KEY,
       text TEXT);
    """)
    conn.commit()
    conn.close()


def update_promo(promo_text):
    conn = sqlite3.connect('/usr/onperspektiva24.com_infobot/main.db')
    c = conn.cursor()
    c.execute(f"UPDATE some_info SET text = '{promo_text}' WHERE id = 1")
    conn.commit()
    conn.close()


def get_promo():
    conn = sqlite3.connect('/usr/onperspektiva24.com_infobot/main.db')
    c = conn.cursor()
    promo = c.execute(
        f"SELECT text FROM some_info WHERE id = 1").fetchone()
    conn.close()
    print(promo)
    return promo[0]

# –ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π start –∏–ª–∏ s
@dp.message_handler(commands=['start', 's'])
async def start_handler(message):
    state = dp.current_state(user=message.from_user.id)
    #await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–¥–æ—Å—Ç—É–ø–∞')
    #await state.set_state(TestStates.all()[1])
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if db.check_user(message.from_user.id):
        del_link = await bot.send_message(message.from_user.id, f"{messages_text['start']}", reply_markup=kb.inlinekey(option='start'))
    else:
        del_link = await bot.send_message(message.from_user.id, f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=markup_request)
    # —Ö—Ä–∞–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è) –∏ —Ä–æ–¥–∏—Ç–µ–ª—è (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
    await state.update_data(del_link=del_link, parent_back='start')


@dp.message_handler(lambda message: message.text and get_promo() in message.text, state=TestStates.TEST_STATE_1)
async def text_handler(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    # –ï—Å–ª–∏ user –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    if db.check_user(message.from_user.id):
        del_link = await bot.send_message(message.from_user.id, f"{messages_text['start']}",
                                          reply_markup=kb.inlinekey(option='start'))
    else:
        del_link = await bot.send_message(message.from_user.id, f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=markup_request)
        # —Ö—Ä–∞–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è) –∏ —Ä–æ–¥–∏—Ç–µ–ª—è (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
    await state.reset_state()
    await state.update_data(del_link=del_link, parent_back='start')


@dp.message_handler(commands=['promo'], state='*')
async def promo_handler(message):
    state = dp.current_state(user=message.from_user.id)
    promo = get_promo()
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ - {promo}')
    await state.set_state(TestStates.all()[0])


@dp.message_handler(state=TestStates.TEST_STATE_1)
async def promo_handler(message):
    await bot.send_message(message.from_user.id, f'üö´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É')



@dp.message_handler(state=TestStates.TEST_STATE_0)
async def promo_handler(message):
    state = dp.current_state(user=message.from_user.id)
    update_promo(message.text)
    promo = get_promo()
    await bot.send_message(message.from_user.id, f'–ü—Ä–æ–º–æ–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: {promo}')
    await state.reset_state()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query_handler(lambda call: call.data)
async def process_callback_button1(call):
    # –≤ state —Ö—Ä–∞–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    state = dp.current_state(user=call['from']['id'])
    user_data = await state.get_data()
    # –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é –∏–∑ –±–∞–∑—ã
    menulist = db.read_sqlite_table(call.data)
    # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–∞—Ä—Ç–∏–Ω–æ–∫ (TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
    try:
        for i in range(len(user_data['del_img'])):
            await bot.delete_message(call.message.chat.id, user_data['del_img'][i]["message_id"])
    except Exception as e:
        pass
    try:
        await bot.delete_message(call.message.chat.id, user_data['del_link']["message_id"])
    except Exception as e:
        pass
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –º–µ–Ω—é –∏–∑ SQLlite
        # –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if call.data == '–ù–∞—à–∏ —Ä–µ–≥–∞–ª–∏–∏':
        media = types.MediaGroup()
        media.attach_photo('AgACAgIAAxkBAAIEP2KCZ8XZ08ORGDbFzyWm1mCkc__bAAIqwDEbJdkZSCOYkCzkeu7tAQADAgADcwADJAQ', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
        media.attach_photo('AgACAgIAAxkBAAIEPGKCZ8RgXj_cZ7Eeq30RtY_NeY01AAIpwDEbJdkZSPbN8oMZ-JDCAQADAgADcwADJAQ', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 1')
        media.attach_photo('AgACAgIAAxkBAAIEOWKCZ8Ov50a-hHfGbrsuoz5yl-QKAAIowDEbJdkZSA12umlTEI5aAQADAgADcwADJAQ', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 2')
        media.attach_photo('AgACAgIAAxkBAAIENmKCZ8KL7d8e3i8_AAG5_4HgtyMmMAACJ8AxGyXZGUh4haFwb_lhKwEAAwIAA3MAAyQE', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3')
        media.attach_photo('AgACAgIAAxkBAAIEM2KCZ8HxbqqVUz4Niu1fqk6fKb3QAAImwDEbJdkZSMvnpAOMD4pkAQADAgADcwADJAQ',
                           '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 4')
        media.attach_photo('AgACAgIAAxkBAAIEMGKCZ8HIU96-zmAIY4LCUFMkRrMDAAIlwDEbJdkZSKwq_-qGTmEmAQADAgADcwADJAQ',
                           '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 5')
        del_img = await bot.send_media_group(call.message.chat.id, media=media)
        await state.update_data(del_img=del_img)
    # –ø—Ä–∏—Å–ª–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if call.data in documents:
        for x in documents[call.data]:
            await bot.send_document(call.from_user.id, x)
    if call.data in youtube:
        for x in youtube[call.data]:
            # await bot.send_document(call.from_user.id, x)
            await bot.send_message(call.from_user.id, x)
            time.sleep(0.5)
    if call.data in menulist[0]:
            await bot.answer_callback_query(call.id)
            del_link = await bot.send_message(call.from_user.id, messages_text[call.data], reply_markup=kb.inlinekey(option=call.data, parent=menulist[1]))
            await state.update_data(del_link=del_link)



#-----------------------------------–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π----------------------------------------------------------------------


# –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–∞–∑—É
@dp.message_handler(commands=['add'])
async def start_handler(message):
    try:
        await bot.send_message(message.from_user.id, f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=markup_request)
    except Exception as e:
        print(e)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    if not db.check_user(message.from_user.id):
        contact = message.contact
        try:
            db.add_user(contact["user_id"], contact["phone_number"][1:], contact["first_name"], message.from_user.username)
            await bot.send_message(message.from_user.id, f"–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω —Å–ø–∞—Å–∏–±–æ", reply_markup=markup_del)
            del_link = await bot.send_message(message.from_user.id, f"{messages_text['start']}",
                                              reply_markup=kb.inlinekey(option='start'))
            await state.update_data(del_link=del_link)
        except Exception as e: print(e)


# —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–∞–∑—ã
@dp.message_handler(commands=['delete'])
async def start_handler(message):
    try:
        db.del_user(message.from_user.id)
        await bot.send_message(message.from_user.id, f"–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã")
    except Exception as e:
        print(e)


# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –≤ –±–∞–∑–µ, –ø—Ä–∏—Å–ª–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
@dp.message_handler(commands=['check'])
async def start_handler(message):
    try:
        text = db.check_user(message.from_user.id)
        if len(text) > 0:
            await bot.send_message(message.from_user.id, f"{text}")
        else:
            await bot.send_message(message.from_user.id, f"–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ")
    except Exception as e:
        print(e)



#-----------------–ø–∏—à–µ–º ID —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É —Å –∏–º–µ–Ω–∞–º–∏----------------------------------------------------------------------



@dp.message_handler(content_types= ['photo', 'video', 'document'])
async def start_handler(message):
    #state = dp.current_state(user=message.from_user.id)
    if 'document' in message:
        print(message['caption'])
        file_id = message.document
        file_id = file_id["file_id"]
        await bot.send_document(message.from_user.id, f'{file_id}')
        await bot.send_message(message.from_user.id, f'{file_id}')
        db.add_ID(message['message_id'], file_id, f'{message["caption"]}')
    elif 'video' in message:
        file_id = message.video
        file_id = file_id["file_id"]
        await bot.send_video(message.from_user.id, f'{file_id}')
        await bot.send_message(message.from_user.id, f'{file_id}')
        db.add_ID(message['message_id'], file_id, f'{message["caption"]}')
    elif 'photo' in message:
        file_id = message.photo
        file_id = file_id[0]["file_id"]
        await bot.send_photo(message.from_user.id, f'{file_id}')
        await bot.send_message(message.from_user.id, f'{file_id}')
        db.add_ID(message['message_id'], file_id, f'{message["caption"]}')


'''@dp.message_handler(state='*')
async def start_handler(message):
    await bot.send_message(message.from_user.id, '/add\n/delete\n/check\n/s /start\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ —Ñ–∞–π–ª')'''


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp)